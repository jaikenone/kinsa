#!/usr/bin/env python3
import getpass
import json
from sqlalchemy import create_engine

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

all_rights = ['DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TRIGGER', 'TRUNCATE', 'UPDATE']

def table_exist_sql(table):
    return f"SELECT 1 FROM information_schema.tables WHERE table_name = '{table}';"

def user_exist_sql(user):
    return f"SELECT 1 FROM pg_roles WHERE rolname='{user}'"

def grant_sql(table, user, rights):
    grant_rights = []
    for r in rights:
        if r in all_rights:
            grant_rights.append(r)
    return f"GRANT {','.join(grant_rights)} ON TABLE {table} TO {user};"

def revoke_sql(table, user, rights):
    revoke_rights = []
    for r in all_rights:
        if r not in rights:
            revoke_rights.append(r)
    return f"REVOKE {','.join(revoke_rights)} ON TABLE {table} FROM {user};"

def get_rights_sql(table, user):
    return f"""
        SELECT  privilege_type
        FROM    information_schema.role_table_grants
        WHERE   table_name = '{table}' AND grantee = '{user}';
    """


if __name__ == '__main__':
    parser = ArgumentParser(
        formatter_class=ArgumentDefaultsHelpFormatter,
        description='Permission DB'
    )

    parser.add_argument(
        '-p',
        '--password',
        help="MasterUser's password",
        type=str
        )
    parser.add_argument(
        '-f',
        '--file-path',
        help="The path of file containing a permission json file",
        type=str,
        required=True
    )

    args = parser.parse_args()

    if args.password is None:
        args.password = getpass.getpass("MasterUser's Password: ")
    password = args.password

    with open(args.file_path) as json_file:
        data = json.load(json_file)
        hostname = data['host']['name']
        port = data['host']['port']
        print(f"hostname: {hostname}, port: {port}")

        databases = data['databases']
        for d in databases:
            db_name = d['name']
            print()
            print(f"working on database: {db_name}")

            conn = None
            try:
                db_uri = f"postgres://masteruser:{password}@{hostname}:{port}/{db_name}"
                engine = create_engine(db_uri)
                conn = engine.connect()

                tables = d['tables']
                for table in tables:
                    table_name = table['name']
                    rs = conn.execute(table_exist_sql(table_name))
                    if rs.rowcount < 1:
                        print(f"    table '{table_name}' does not exist in '{db_name}' database, skipping.")
                    else:
                        print(f"    table: {table_name}")

                        users = table['users']
                        for user in users:
                            user_name = user['name']
                            rs = conn.execute(user_exist_sql(user_name))
                            if rs.rowcount < 1:
                                print(f"        user '{user_name}' does not exist, skipping.")
                            else:
                                rs = conn.execute(get_rights_sql(table_name, user_name))
                                current_rights = sorted([r[0] for r in rs])
                                requested_rights = sorted(user['rights'])
                                print(f"        user: {user_name}")
                                print(f"            current rights:   {current_rights}")
                                print(f"            requested rights: {requested_rights}")
                                print()
                                if current_rights == requested_rights:
                                    print("        No changes needed, skipping.")
                                else:
                                    answer = input("        Apply changes (Y/n): ")
                                    if answer.upper() == 'Y':
                                        try:

                                            if len(requested_rights):
                                                conn.execute(revoke_sql(table_name, user_name, requested_rights))
                                            else:
                                                conn.execute(revoke_sql(table_name, user_name, all_rights))
                                            conn.execute(grant_sql(table_name, user_name, requested_rights))
                                            print(f"        Changes applied to '{table_name}' for '{user_name}'.")

                                        except Exception as e:
                                            print(f"*** ERROR: {e}")

                                    else:
                                        print(f"        No changes applied to '{table_name}' for '{user_name}'.")
                            print()
                        print()

            except Exception as e:
                print(f"*** ERROR: {e}")
            finally:
                if conn is not None:
                    conn.close()
